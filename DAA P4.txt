# Recursive function to solve the knapsack problem
def knapsack(W, wt, val, n):
    # Base Case: If no items left or capacity is 0, return 0
    if n == 0 or W == 0:
        return 0

    # If the weight of the nth item is more than the capacity W,
    # skip the item
    if wt[n - 1] > W:
        return knapsack(W, wt, val, n - 1)

    # Else, find the maximum of including or not including the nth item
    else:
        return max(
            val[n - 1] + knapsack(W - wt[n - 1], wt, val, n - 1),  # Include the item
            knapsack(W, wt, val, n - 1)                            # Exclude the item
        )

# Driver Code with user input
if __name__ == "__main__":
    # Get total capacity of the knapsack
    W = int(input("Enter the total weight capacity of the knapsack: "))

    # Get the number of items
    n = int(input("Enter the number of items: "))

    # Lists to store weights and values
    val = []
    wt = []

    # Get value and weight for each item
    for i in range(n):
        value = int(input(f"Enter value for item {i + 1}: "))
        weight = int(input(f"Enter weight for item {i + 1}: "))
        val.append(value)
        wt.append(weight)

    # Function call
    max_val = knapsack(W, wt, val, n)
    print("Maximum value in Knapsack =", max_val)
