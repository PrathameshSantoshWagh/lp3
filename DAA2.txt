import heapq

class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq           # Frequency of the symbol
        self.symbol = symbol       # Symbol (character)
        self.left = left           # Left child node
        self.right = right         # Right child node
        self.huff = ''             # Huffman code direction (0/1)

    def __lt__(self, nxt):
        return self.freq < nxt.freq

# Utility function to print huffman codes for all symbols
def printNodes(node, val=''):
    newVal = val + str(node.huff)
    if node.left:
        printNodes(node.left, newVal)
    if node.right:
        printNodes(node.right, newVal)
    if not node.left and not node.right:
        print(f"{node.symbol} -> {newVal}")

# User input for characters and frequencies
chars = input("Enter characters separated by space: ").split()
freq = list(map(int, input("Enter frequencies separated by space: ").split()))

# Error check to ensure characters and frequencies lists are the same length
if len(chars) != len(freq):
    print("Error: The number of characters and frequencies must match.")
else:
    nodes = []

    # Converting characters and frequencies into Huffman Tree nodes
    for x in range(len(chars)):
        heapq.heappush(nodes, Node(freq[x], chars[x]))

    # Building the Huffman Tree
    while len(nodes) > 1:
        left = heapq.heappop(nodes)
        right = heapq.heappop(nodes)
        left.huff = 0
        right.huff = 1
        newNode = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)
        heapq.heappush(nodes, newNode)

    # Printing Huffman Codes
    print("\nHuffman Codes for the characters:")
    printNodes(nodes[0])
