def print_board(board):
    """Function to print the board"""
    for row in board:
        print(" ".join("Q" if x else "." for x in row))
    print()

def is_safe(board, row, col, n):
    """Check if it's safe to place a queen at board[row][col]"""
    # Check this row on the left side
    for i in range(col):
        if board[row][i]:
            return False
    
    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False
    
    # Check lower diagonal on the left side
    for i, j in zip(range(row, n), range(col, -1, -1)):
        if board[i][j]:
            return False
    
    return True

def solve_n_queens(board, col, n):
    """Use backtracking to place queens"""
    # Base case: If all queens are placed, return True
    if col >= n:
        return True
    
    # Consider this column and try placing this queen in all rows one by one
    for i in range(n):
        if is_safe(board, i, col, n):
            # Place this queen in board[i][col]
            board[i][col] = 1
            
            # Recur to place the rest of the queens
            if solve_n_queens(board, col + 1, n):
                return True
            
            # If placing queen in board[i][col] doesn't lead to a solution,
            # then remove queen from board[i][col]
            board[i][col] = 0
    
    # If the queen can't be placed in any row in this column, return False
    return False

def n_queens_with_first_queen():
    """Get user input for the board size and initial position, then solve"""
    # Take user input for the size of the board
    n = int(input("Enter the size of the board (n): "))
    
    # Take user input for the initial position of the first queen
    first_row = int(input("Enter the row position of the first queen (0 to n-1): "))
    first_col = int(input("Enter the column position of the first queen (0 to n-1): "))
    
    # Initialize the board with all 0s
    board = [[0] * n for _ in range(n)]
    
    # Place the first queen at the specified position
    board[first_row][first_col] = 1
    
    # Start solving from the next column
    if not solve_n_queens(board, 1, n):
        print("Solution does not exist")
    else:
        print_board(board)

# Run the function
n_queens_with_first_queen()
